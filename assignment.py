# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13amoZa4gJTnFx0UeqJAn3GRxlpixoS7Y
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sdf = pd.read_csv('/content/fear_greed_index.csv')
tdf = pd.read_csv('/content/historical_data.csv')

sdf['date'] = pd.to_datetime(sdf['date']).dt.date
tdf['trade_date'] = pd.to_datetime(tdf['Timestamp IST'], format='%d-%m-%Y %H:%M').dt.date

mdf = pd.merge(tdf, sdf, left_on='trade_date', right_on='date', how='left')

mdf.head(2)

print(mdf.info())
print(mdf[['trade_date', 'classification']].head())
print("Unmatched rows:", mdf['classification'].isnull().sum())

missing_sentiment_rows = mdf[mdf['classification'].isnull()]
missing_sentiment_rows[['Account', 'Timestamp IST', 'trade_date', 'Closed PnL','Size USD']]

mdf = mdf[mdf['classification'].notnull()]
mdf.isnull().sum()

x1=mdf.groupby('classification')['Closed PnL'].mean().reset_index().sort_values(by='Closed PnL', ascending=False)
x1.head()

#making a bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x='classification', y='Closed PnL', data=x1,hue='classification',width=0.5)
plt.xlabel('Market Sentiment')
plt.ylabel('Average Closed PnL')
plt.title('Average Closed PnL by Sentiment')
plt.show()

#making pie chart
plt.figure(figsize=(10, 6))
plt.pie(x1['Closed PnL'], labels=x1['classification'], autopct='%1.1f%%')
plt.title('Closed PnL by Classification')
plt.show()

x2=mdf.groupby(['classification', 'Side'])['Closed PnL'].mean().unstack().round(2)
x2.head(10)

import seaborn as sns
import matplotlib.pyplot as plt


plot_df = x2.reset_index().melt(
    id_vars='classification',
    value_vars=['BUY', 'SELL'],
    var_name='Trade Side',
    value_name='Average Closed PnL'
)

sns.set_style("whitegrid")


plt.figure(figsize=(10, 6))
barplot = sns.barplot(
    data=plot_df,
    x='classification',
    y='Average Closed PnL',
    hue='Trade Side',
    palette='Set2'
)

plt.title('Average PnL by Sentiment and Trade Side', fontsize=14)
plt.xlabel('Market Sentiment', fontsize=12)
plt.ylabel('Average Closed PnL', fontsize=12)
plt.axhline(0, color='black', linewidth=0.8)
plt.legend(title='Trade Side')
plt.tight_layout()

plt.show()

import plotly.express as px


plot_df = x2.reset_index().melt(
    id_vars='classification',
    value_vars=['BUY', 'SELL'],
    var_name='Trade Side',
    value_name='Average Closed PnL'
)

fig = px.bar(
    plot_df,
    x='classification',
    y='Average Closed PnL',
    color='Trade Side',
    barmode='group',
    title='Clustered Column Chart: Average Closed PnL by Sentiment and Trade Side',
    labels={'classification': 'Market Sentiment'}
)
fig.update_traces(width=0.3)
fig.update_layout(bargap=0.3)



fig.update_layout(
    xaxis_title='Market Sentiment',
    yaxis_title='Average Closed PnL',
    legend_title='Trade Side',
    bargap=0.2,
    plot_bgcolor='black',
    paper_bgcolor='black',
    font=dict(color='white')
)


fig.show()

"""Checking  if traders take more risk during Greed phases by increasing trade size."""

x3=mdf.groupby('classification')['Size USD'].mean().sort_values(ascending=False).round(2).reset_index()
x3.head(5)

traders_by_each_sentiment=mdf['classification'].value_counts().reset_index()
traders_by_each_sentiment

import plotly.express as px
import pandas as pd

avg_trade_size_df = x3.groupby('classification')['Size USD'].mean().reset_index()


fig = px.bar(
    avg_trade_size_df,
    x='classification',
    y='Size USD',
    text='Size USD',
    title='ðŸ“Š Average Trade Size by Market Sentiment',
    labels={'classification': 'Sentiment', 'Size USD': 'Avg Trade Size (USD)'},
    color='Size USD',
    color_continuous_scale='Viridis'
)
fig.update_traces(width=0.4)
fig.update_layout(bargap=0.4)



fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(
    xaxis_title='Market Sentiment',
    yaxis_title='Average Trade Size (USD)',
    uniformtext_minsize=8,
    uniformtext_mode='hide',
    bargap=0.3,
    plot_bgcolor='black',
    paper_bgcolor='black',
    font=dict(color='white')
)


fig.show()

x4=mdf.groupby(['classification', 'Side'])['Closed PnL'].sum().unstack().round(2).reset_index()
x4

"""Combine both sentiment and direction to see where the real money is made."""

import plotly.express as px

total_pnl_df = mdf.groupby(['classification', 'Side'])['Closed PnL'].sum().reset_index()


fig = px.bar(
    total_pnl_df,
    x='classification',
    y='Closed PnL',
    color='Side',
    barmode='group',
    title='Total Closed PnL by Sentiment and Trade Side',
    labels={'classification': 'Market Sentiment'}
)

fig.update_layout(
    plot_bgcolor='navy',
    paper_bgcolor='black',
    font=dict(color='white'),
    bargap=0.3
)

fig.show()

mdf['date'] = pd.to_datetime(mdf['Timestamp IST'], format='%d-%m-%Y %H:%M').dt.date
daily_pnl = mdf.groupby('date')['Closed PnL'].sum().reset_index()
import plotly.express as px

fig = px.line(
    daily_pnl,
    x='date',
    y='Closed PnL',
    title='Daily Net PnL Trend Over Time',
    labels={'date': 'Date', 'Closed PnL': 'Net PnL'},
    markers=True
)

fig.update_layout(
    xaxis_title='Date',
    yaxis_title='Net Profit/Loss',
    plot_bgcolor='black',
    paper_bgcolor='black',
    font=dict(color='white')
)

fig.show()

!pip install dash

from jupyter_dash import JupyterDash
from dash import html, dcc, Input, Output
import pandas as pd

mdf['Timestamp IST'] = pd.to_datetime(mdf['Timestamp IST'], errors='coerce')
mdf['date'] = mdf['Timestamp IST'].dt.date


unique_dates = sorted(mdf['date'].dropna().unique())


app = JupyterDash(__name__)
app.title = "Compact Trade Summary"

app.layout = html.Div(style={'fontFamily': 'Arial', 'backgroundColor': '#111', 'color': 'white', 'padding': '20px'}, children=[
    html.H2("ðŸ“‹ Daily Trade Summary", style={'textAlign': 'center'}),

    html.Label("Select a Date:", style={'fontSize': '16px'}),
    dcc.Dropdown(
        id='date-picker',
        options=[{'label': str(d), 'value': str(d)} for d in unique_dates],
        value=str(unique_dates[-1]),
        style={'width': '50%', 'color': '#000'}
    ),

    html.Div(id='summary-output', style={'marginTop': '30px', 'fontSize': '16px', 'whiteSpace': 'pre-line'})
])

@app.callback(
    Output('summary-output', 'children'),
    Input('date-picker', 'value')
)
def update_summary(selected_date):
    selected_date = pd.to_datetime(selected_date).date()
    df = mdf[mdf['date'] == selected_date]

    if df.empty:
        return f"No trades found on {selected_date}."


    sentiment = df['classification'].mode()[0]
    total_trades = len(df)
    net_pnl = df['Closed PnL'].sum()
    buy_pnl = df[df['Side'] == 'BUY']['Closed PnL'].sum()
    sell_pnl = df[df['Side'] == 'SELL']['Closed PnL'].sum()
    total_volume = df['Size USD'].sum()


    summary = f"""
ðŸ“… Date: {selected_date}
ðŸ§  Sentiment: {sentiment}
ðŸ“Š Total Trades: {total_trades}
ðŸ’¼ Total Volume (USD): ${total_volume:,.2f}
ðŸ’° Net PnL: ${net_pnl:,.2f}

Side Breakdown:
   ðŸ”¼ BUY  PnL: ${buy_pnl:,.2f}
   ðŸ”½ SELL PnL: ${sell_pnl:,.2f}
    """

    return summary

app.run(mode='inline', debug=True)

from jupyter_dash import JupyterDash
from dash import html, dcc, Input, Output
import pandas as pd


mdf['Timestamp IST'] = pd.to_datetime(mdf['Timestamp IST'], errors='coerce')
mdf['date'] = mdf['Timestamp IST'].dt.date
unique_dates = sorted(mdf['date'].dropna().unique())


app = JupyterDash(__name__)
app.title = "Detailed Trade Summary"

app.layout = html.Div(style={'fontFamily': 'Arial', 'backgroundColor': '#111', 'color': 'white', 'padding': '20px'}, children=[
    html.H2("ðŸ“‹ Daily Trade Summary", style={'textAlign': 'center'}),

    html.Label("Select a Date:", style={'fontSize': '16px'}),
    dcc.Dropdown(
        id='date-picker',
        options=[{'label': str(d), 'value': str(d)} for d in unique_dates],
        value=str(unique_dates[-1]),
        style={'width': '50%', 'color': '#000'}
    ),

    html.Div(id='summary-output', style={'marginTop': '30px', 'fontSize': '16px', 'whiteSpace': 'pre-line'})
])

@app.callback(
    Output('summary-output', 'children'),
    Input('date-picker', 'value')
)
def update_summary(selected_date):
    selected_date = pd.to_datetime(selected_date).date()
    df = mdf[mdf['date'] == selected_date]

    if df.empty:
        return f"No trades found on {selected_date}."


    sentiment = df['classification'].mode()[0]
    total_trades = len(df)
    net_pnl = df['Closed PnL'].sum()
    buy_pnl = df[df['Side'] == 'BUY']['Closed PnL'].sum()
    sell_pnl = df[df['Side'] == 'SELL']['Closed PnL'].sum()
    total_volume = df['Size USD'].sum()
    unique_accounts = df['Account'].nunique()
    most_traded_coin = df['Coin'].mode()[0] if not df['Coin'].isna().all() else "N/A"
    total_fee = df['Fee'].sum()


    summary = f"""
ðŸ“… Date: {selected_date}
ðŸ§  Sentiment: {sentiment}
ðŸ‘¤ Unique Accounts: {unique_accounts}
ðŸª™ Most Traded Coin: {most_traded_coin}

ðŸ“Š Total Trades: {total_trades}
ðŸ’¼ Total Volume (USD): ${total_volume:,.2f}
ðŸ’° Net PnL: ${net_pnl:,.2f}
ðŸ’¸ Total Fee Paid: ${total_fee:,.4f}

Side Breakdown:
   ðŸ”¼ BUY  PnL: ${buy_pnl:,.2f}
   ðŸ”½ SELL PnL: ${sell_pnl:,.2f}
    """
    return summary


app.run(mode='inline', debug=True)

import pandas as pd


df = mdf.dropna(subset=['Account', 'classification', 'Closed PnL', 'Size USD'])


performance_df = df.groupby(['Account', 'classification']).agg(
    total_trades=('Closed PnL', 'count'),
    net_pnl=('Closed PnL', 'sum'),
    avg_pnl=('Closed PnL', 'mean'),
    total_volume=('Size USD', 'sum')
).reset_index()


performance_df['roi_percent'] = (performance_df['net_pnl'] / performance_df['total_volume']) * 100


performance_df = performance_df.round({
    'net_pnl': 2,
    'avg_pnl': 2,
    'total_volume': 2,
    'roi_percent': 2
})


performance_df.head(10)

pivot = performance_df.pivot(index='Account', columns='classification', values='net_pnl').fillna(0)


greed_sentiments = ['Greed', 'Extreme Greed']
fear_sentiments = ['Fear', 'Extreme Fear']

def classify_trader(row):
    greed_pnl = sum([row.get(s, 0) for s in greed_sentiments])
    fear_pnl = sum([row.get(s, 0) for s in fear_sentiments])
    all_positive = sum([1 for val in row if val > 0])

    if all_positive >= 3:
        return 'Adaptive'
    elif greed_pnl > 0 and fear_pnl <= 0:
        return 'Trend Follower'
    elif fear_pnl > 0 and greed_pnl <= 0:
        return 'Contrarian'
    else:
        return 'Unclassified'


pivot['trader_type'] = pivot.apply(classify_trader, axis=1)


classified_traders = pivot.reset_index()[['Account', 'trader_type']]
classified_traders.head(10)

from dash import dash_table


sentiments = sorted(performance_df['classification'].unique())
types = sorted(classified_traders['trader_type'].unique())

app = JupyterDash(__name__)
app.title = "Trader Performance Summary"

app.layout = html.Div(style={'fontFamily': 'Arial', 'padding': '20px'}, children=[
    html.H2("ðŸ“Š Trader Summary Dashboard"),

    html.H4("Module 1: Select Sentiment"),
    dcc.Dropdown(id='sentiment-picker',
                 options=[{'label': s, 'value': s} for s in sentiments],
                 value='Greed',
                 style={'width': '50%'}),

    html.Br(),

    html.Div(id='performance-output'),

    html.Hr(),

    html.H4("Module 2: Select Trader Type"),
    dcc.Dropdown(id='type-picker',
                 options=[{'label': t, 'value': t} for t in types],
                 value='Adaptive',
                 style={'width': '50%'}),

    html.Br(),

    html.Div(id='type-output')
])
@app.callback(
    Output('performance-output', 'children'),
    Input('sentiment-picker', 'value')
)
def show_sentiment_summary(sentiment):
    subset = performance_df[performance_df['classification'] == sentiment].sort_values(by='net_pnl', ascending=False).head(10)
    return dash_table.DataTable(
        columns=[{"name": i, "id": i} for i in subset.columns],
        data=subset.to_dict('records'),
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left'},
        page_size=10
    )

@app.callback(
    Output('type-output', 'children'),
    Input('type-picker', 'value')
)
def show_type_summary(selected_type):
    trader_subset = classified_traders[classified_traders['trader_type'] == selected_type]
    return dash_table.DataTable(
        columns=[{"name": i, "id": i} for i in trader_subset.columns],
        data=trader_subset.to_dict('records'),
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left'},
        page_size=10
    )
app.run(mode='inline', debug=True)

score_groups = mdf.groupby('classification')

metrics = []

for score, group in score_groups:
    net_pnl = group['Closed PnL'].sum()
    total_trades = len(group)
    wins = group[group['Closed PnL'] > 0]
    win_rate = len(wins) / total_trades if total_trades else 0

    profit_sum = wins['Closed PnL'].sum()
    loss_sum = -group[group['Closed PnL'] < 0]['Closed PnL'].sum()
    profit_factor = profit_sum / loss_sum if loss_sum > 0 else np.nan

    mean_pnl = group['Closed PnL'].mean()
    std_pnl = group['Closed PnL'].std()
    sharpe = (mean_pnl / std_pnl * np.sqrt(total_trades)) if std_pnl else np.nan

    cumulative = group['Closed PnL'].cumsum()
    drawdown = (cumulative.cummax() - cumulative).max()

    roi = net_pnl / group['Size USD'].sum() * 100 if group['Size USD'].sum() > 0 else np.nan

    metrics.append({
        'score': score,
        'Net PnL': net_pnl,
        'Win Rate': round(win_rate * 100, 2),
        'Profit Factor': round(profit_factor, 2),
        'Sharpe Ratio': round(sharpe, 2),
        'Max Drawdown': round(drawdown, 2),
        'ROI (%)': round(roi, 2),
        'Trade Count': total_trades
    })

score_df = pd.DataFrame(metrics).sort_values(by='score')
score_df.head()

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pearsonr, spearmanr

df1 = mdf.dropna(subset=['value', 'Closed PnL', 'Size USD'])

df1['sentiment_score'] = df1['value'].round().astype(int)


score_groups = df1.groupby('sentiment_score')


results = []

for score, group in score_groups:
    total_trades = len(group)
    wins = group[group['Closed PnL'] > 0]
    losses = group[group['Closed PnL'] < 0]

    net_pnl = group['Closed PnL'].sum()
    win_rate = len(wins) / total_trades if total_trades else 0
    profit_sum = wins['Closed PnL'].sum()
    loss_sum = -losses['Closed PnL'].sum()
    profit_factor = profit_sum / loss_sum if loss_sum > 0 else np.nan
    mean_pnl = group['Closed PnL'].mean()
    std_pnl = group['Closed PnL'].std()
    sharpe = (mean_pnl / std_pnl) * np.sqrt(total_trades) if std_pnl else np.nan
    cumulative = group['Closed PnL'].cumsum()
    drawdown = (cumulative.cummax() - cumulative).max()
    roi = net_pnl / group['Size USD'].sum() * 100 if group['Size USD'].sum() > 0 else np.nan

    results.append({
        'Sentiment Score': score,
        'Net PnL': round(net_pnl, 2),
        'Win Rate (%)': round(win_rate * 100, 2),
        'Profit Factor': round(profit_factor, 2),
        'Sharpe Ratio': round(sharpe, 2),
        'Max Drawdown': round(drawdown, 2),
        'ROI (%)': round(roi, 2),
        'Trade Count': total_trades
    })

score_df = pd.DataFrame(results).sort_values(by='Sentiment Score')
score_df.head()

plt.figure(figsize=(14, 6))
sns.lineplot(data=score_df, x='Sentiment Score', y='Net PnL', label='Net PnL')
sns.lineplot(data=score_df, x='Sentiment Score', y='ROI (%)', label='ROI (%)')
sns.lineplot(data=score_df, x='Sentiment Score', y='Win Rate (%)', label='Win Rate (%)')
plt.title("ðŸ“ˆ Performance Metrics vs Sentiment Score")
plt.xlabel("Sentiment Score (0 = Extreme Fear, 100 = Extreme Greed)")
plt.ylabel("Metric Value")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

for col in ['Net PnL', 'ROI (%)', 'Win Rate (%)', 'Profit Factor', 'Sharpe Ratio']:
    pearson = pearsonr(score_df['Sentiment Score'], score_df[col])[0]
    spearman = spearmanr(score_df['Sentiment Score'], score_df[col])[0]
    print(f"{col}: Pearson = {pearson:.3f}, Spearman = {spearman:.3f}")